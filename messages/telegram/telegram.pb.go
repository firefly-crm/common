// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.9.1
// source: telegram/telegram.proto

package telegram

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CommandType int32

const (
	CommandType_CMD_UNKNOWN          CommandType = 0
	CommandType_START                CommandType = 1
	CommandType_CREATE_ORDER         CommandType = 2
	CommandType_REGISTER_AS_MERCHANT CommandType = 3
)

// Enum value maps for CommandType.
var (
	CommandType_name = map[int32]string{
		0: "CMD_UNKNOWN",
		1: "START",
		2: "CREATE_ORDER",
		3: "REGISTER_AS_MERCHANT",
	}
	CommandType_value = map[string]int32{
		"CMD_UNKNOWN":          0,
		"START":                1,
		"CREATE_ORDER":         2,
		"REGISTER_AS_MERCHANT": 3,
	}
)

func (x CommandType) Enum() *CommandType {
	p := new(CommandType)
	*p = x
	return p
}

func (x CommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_telegram_telegram_proto_enumTypes[0].Descriptor()
}

func (CommandType) Type() protoreflect.EnumType {
	return &file_telegram_telegram_proto_enumTypes[0]
}

func (x CommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandType.Descriptor instead.
func (CommandType) EnumDescriptor() ([]byte, []int) {
	return file_telegram_telegram_proto_rawDescGZIP(), []int{0}
}

type CallbackType int32

const (
	CallbackType_CB_UNKNOWN               CallbackType = 0
	CallbackType_ITEMS                    CallbackType = 1
	CallbackType_CUSTOMER                 CallbackType = 2
	CallbackType_PAYMENTS                 CallbackType = 3
	CallbackType_RECEIPT_ITEMS_ADD        CallbackType = 4
	CallbackType_RECEIPT_ITEMS_REMOVE     CallbackType = 5
	CallbackType_RECEIPT_ITEMS_EDIT       CallbackType = 6
	CallbackType_BACK                     CallbackType = 7
	CallbackType_CANCEL                   CallbackType = 8
	CallbackType_ADD_PAYMENT_LINK         CallbackType = 9
	CallbackType_ADD_PAYMENT_TRANSFER     CallbackType = 10
	CallbackType_ADD_PAYMENT_CASH         CallbackType = 11
	CallbackType_PAYMENT_AMOUNT_FULL      CallbackType = 12
	CallbackType_PAYMENT_AMOUNT_PARTIAL   CallbackType = 13
	CallbackType_PAYMENT_REFUND_FULL      CallbackType = 14
	CallbackType_PAYMENT_REFUND_PARTIAL   CallbackType = 15
	CallbackType_PAYMENTS_REFUND          CallbackType = 16
	CallbackType_PAYMENTS_REMOVE          CallbackType = 17
	CallbackType_ORDER_ACTIONS            CallbackType = 18
	CallbackType_ORDER_STATE_DONE         CallbackType = 19
	CallbackType_ORDER_DELETE             CallbackType = 20
	CallbackType_ORDER_RESTART            CallbackType = 21
	CallbackType_ORDER_RESTORE            CallbackType = 22
	CallbackType_ORDER_COLLAPSE           CallbackType = 23
	CallbackType_ORDER_EXPAND             CallbackType = 24
	CallbackType_ORDER_STATE_IN_PROGRESS  CallbackType = 25
	CallbackType_NOTIFY_READ              CallbackType = 26
	CallbackType_CUSTOMER_EDIT_EMAIL      CallbackType = 27
	CallbackType_CUSTOMER_EDIT_PHONE      CallbackType = 28
	CallbackType_CUSTOMER_EDIT_INSTAGRAM  CallbackType = 29
	CallbackType_RECEIPT_ITEM_EDIT        CallbackType = 30
	CallbackType_RECEIPT_ITEM_EDIT_QTY    CallbackType = 31
	CallbackType_RECEIPT_ITEM_EDIT_PRICE  CallbackType = 32
	CallbackType_RECEIPT_ITEM_EDIT_NAME   CallbackType = 33
	CallbackType_RECEIPT_ITEM_REMOVE      CallbackType = 34
	CallbackType_PAYMENT_REFUND           CallbackType = 35
	CallbackType_PAYMENT_REMOVE           CallbackType = 36
	CallbackType_CUSTOM_ITEM_DELIVERY     CallbackType = 500
	CallbackType_CUSTOM_ITEM_LINGERIE_SET CallbackType = 501
)

// Enum value maps for CallbackType.
var (
	CallbackType_name = map[int32]string{
		0:   "CB_UNKNOWN",
		1:   "ITEMS",
		2:   "CUSTOMER",
		3:   "PAYMENTS",
		4:   "RECEIPT_ITEMS_ADD",
		5:   "RECEIPT_ITEMS_REMOVE",
		6:   "RECEIPT_ITEMS_EDIT",
		7:   "BACK",
		8:   "CANCEL",
		9:   "ADD_PAYMENT_LINK",
		10:  "ADD_PAYMENT_TRANSFER",
		11:  "ADD_PAYMENT_CASH",
		12:  "PAYMENT_AMOUNT_FULL",
		13:  "PAYMENT_AMOUNT_PARTIAL",
		14:  "PAYMENT_REFUND_FULL",
		15:  "PAYMENT_REFUND_PARTIAL",
		16:  "PAYMENTS_REFUND",
		17:  "PAYMENTS_REMOVE",
		18:  "ORDER_ACTIONS",
		19:  "ORDER_STATE_DONE",
		20:  "ORDER_DELETE",
		21:  "ORDER_RESTART",
		22:  "ORDER_RESTORE",
		23:  "ORDER_COLLAPSE",
		24:  "ORDER_EXPAND",
		25:  "ORDER_STATE_IN_PROGRESS",
		26:  "NOTIFY_READ",
		27:  "CUSTOMER_EDIT_EMAIL",
		28:  "CUSTOMER_EDIT_PHONE",
		29:  "CUSTOMER_EDIT_INSTAGRAM",
		30:  "RECEIPT_ITEM_EDIT",
		31:  "RECEIPT_ITEM_EDIT_QTY",
		32:  "RECEIPT_ITEM_EDIT_PRICE",
		33:  "RECEIPT_ITEM_EDIT_NAME",
		34:  "RECEIPT_ITEM_REMOVE",
		35:  "PAYMENT_REFUND",
		36:  "PAYMENT_REMOVE",
		500: "CUSTOM_ITEM_DELIVERY",
		501: "CUSTOM_ITEM_LINGERIE_SET",
	}
	CallbackType_value = map[string]int32{
		"CB_UNKNOWN":               0,
		"ITEMS":                    1,
		"CUSTOMER":                 2,
		"PAYMENTS":                 3,
		"RECEIPT_ITEMS_ADD":        4,
		"RECEIPT_ITEMS_REMOVE":     5,
		"RECEIPT_ITEMS_EDIT":       6,
		"BACK":                     7,
		"CANCEL":                   8,
		"ADD_PAYMENT_LINK":         9,
		"ADD_PAYMENT_TRANSFER":     10,
		"ADD_PAYMENT_CASH":         11,
		"PAYMENT_AMOUNT_FULL":      12,
		"PAYMENT_AMOUNT_PARTIAL":   13,
		"PAYMENT_REFUND_FULL":      14,
		"PAYMENT_REFUND_PARTIAL":   15,
		"PAYMENTS_REFUND":          16,
		"PAYMENTS_REMOVE":          17,
		"ORDER_ACTIONS":            18,
		"ORDER_STATE_DONE":         19,
		"ORDER_DELETE":             20,
		"ORDER_RESTART":            21,
		"ORDER_RESTORE":            22,
		"ORDER_COLLAPSE":           23,
		"ORDER_EXPAND":             24,
		"ORDER_STATE_IN_PROGRESS":  25,
		"NOTIFY_READ":              26,
		"CUSTOMER_EDIT_EMAIL":      27,
		"CUSTOMER_EDIT_PHONE":      28,
		"CUSTOMER_EDIT_INSTAGRAM":  29,
		"RECEIPT_ITEM_EDIT":        30,
		"RECEIPT_ITEM_EDIT_QTY":    31,
		"RECEIPT_ITEM_EDIT_PRICE":  32,
		"RECEIPT_ITEM_EDIT_NAME":   33,
		"RECEIPT_ITEM_REMOVE":      34,
		"PAYMENT_REFUND":           35,
		"PAYMENT_REMOVE":           36,
		"CUSTOM_ITEM_DELIVERY":     500,
		"CUSTOM_ITEM_LINGERIE_SET": 501,
	}
)

func (x CallbackType) Enum() *CallbackType {
	p := new(CallbackType)
	*p = x
	return p
}

func (x CallbackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallbackType) Descriptor() protoreflect.EnumDescriptor {
	return file_telegram_telegram_proto_enumTypes[1].Descriptor()
}

func (CallbackType) Type() protoreflect.EnumType {
	return &file_telegram_telegram_proto_enumTypes[1]
}

func (x CallbackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallbackType.Descriptor instead.
func (CallbackType) EnumDescriptor() ([]byte, []int) {
	return file_telegram_telegram_proto_rawDescGZIP(), []int{1}
}

type PromptEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MessageId   uint64 `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	UserMessage string `protobuf:"bytes,3,opt,name=user_message,json=userMessage,proto3" json:"user_message,omitempty"`
}

func (x *PromptEvent) Reset() {
	*x = PromptEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_telegram_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromptEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptEvent) ProtoMessage() {}

func (x *PromptEvent) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_telegram_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptEvent.ProtoReflect.Descriptor instead.
func (*PromptEvent) Descriptor() ([]byte, []int) {
	return file_telegram_telegram_proto_rawDescGZIP(), []int{0}
}

func (x *PromptEvent) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PromptEvent) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *PromptEvent) GetUserMessage() string {
	if x != nil {
		return x.UserMessage
	}
	return ""
}

type CallbackEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64       `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MessageId uint64       `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	EntityId  uint64       `protobuf:"varint,3,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Event     CallbackType `protobuf:"varint,100,opt,name=event,proto3,enum=telegram.CallbackType" json:"event,omitempty"`
}

func (x *CallbackEvent) Reset() {
	*x = CallbackEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_telegram_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackEvent) ProtoMessage() {}

func (x *CallbackEvent) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_telegram_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackEvent.ProtoReflect.Descriptor instead.
func (*CallbackEvent) Descriptor() ([]byte, []int) {
	return file_telegram_telegram_proto_rawDescGZIP(), []int{1}
}

func (x *CallbackEvent) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CallbackEvent) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *CallbackEvent) GetEntityId() uint64 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *CallbackEvent) GetEvent() CallbackType {
	if x != nil {
		return x.Event
	}
	return CallbackType_CB_UNKNOWN
}

type CommandEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64      `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MessageId uint64      `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Arguments []string    `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Command   CommandType `protobuf:"varint,100,opt,name=command,proto3,enum=telegram.CommandType" json:"command,omitempty"`
}

func (x *CommandEvent) Reset() {
	*x = CommandEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_telegram_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandEvent) ProtoMessage() {}

func (x *CommandEvent) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_telegram_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandEvent.ProtoReflect.Descriptor instead.
func (*CommandEvent) Descriptor() ([]byte, []int) {
	return file_telegram_telegram_proto_rawDescGZIP(), []int{2}
}

func (x *CommandEvent) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CommandEvent) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *CommandEvent) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *CommandEvent) GetCommand() CommandType {
	if x != nil {
		return x.Command
	}
	return CommandType_CMD_UNKNOWN
}

var File_telegram_telegram_proto protoreflect.FileDescriptor

var file_telegram_telegram_proto_rawDesc = []byte{
	0x0a, 0x17, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xba,
	0xe9, 0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xba, 0xe9, 0xc0,
	0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0xba, 0xe9,
	0xc0, 0x03, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0xb9, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03,
	0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0xba, 0xe9, 0xc0, 0x03, 0x07, 0x82, 0x01, 0x04,
	0x10, 0x01, 0x20, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2a, 0x55, 0x0a,
	0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x4d, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41,
	0x4e, 0x54, 0x10, 0x03, 0x2a, 0xe8, 0x06, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x42, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11,
	0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x5f, 0x41, 0x44,
	0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x05, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x5f, 0x45,
	0x44, 0x49, 0x54, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x07, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x44, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10,
	0x09, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x44, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x10,
	0x0b, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x41, 0x4c, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x0e, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e,
	0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x10,
	0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x13, 0x12, 0x10,
	0x0a, 0x0c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x14,
	0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x10, 0x17, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x19, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x1a, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f,
	0x45, 0x44, 0x49, 0x54, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x1c, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x1d, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x43,
	0x45, 0x49, 0x50, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x1e,
	0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x51, 0x54, 0x59, 0x10, 0x1f, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x44, 0x49, 0x54,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x20, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x50, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x21, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x22, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10,
	0x23, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x10, 0x24, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0xf4, 0x03,
	0x12, 0x1d, 0x0a, 0x18, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x4c, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x49, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xf5, 0x03, 0x42,
	0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69,
	0x72, 0x65, 0x66, 0x6c, 0x79, 0x2d, 0x63, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_telegram_telegram_proto_rawDescOnce sync.Once
	file_telegram_telegram_proto_rawDescData = file_telegram_telegram_proto_rawDesc
)

func file_telegram_telegram_proto_rawDescGZIP() []byte {
	file_telegram_telegram_proto_rawDescOnce.Do(func() {
		file_telegram_telegram_proto_rawDescData = protoimpl.X.CompressGZIP(file_telegram_telegram_proto_rawDescData)
	})
	return file_telegram_telegram_proto_rawDescData
}

var file_telegram_telegram_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_telegram_telegram_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_telegram_telegram_proto_goTypes = []interface{}{
	(CommandType)(0),      // 0: telegram.CommandType
	(CallbackType)(0),     // 1: telegram.CallbackType
	(*PromptEvent)(nil),   // 2: telegram.PromptEvent
	(*CallbackEvent)(nil), // 3: telegram.CallbackEvent
	(*CommandEvent)(nil),  // 4: telegram.CommandEvent
}
var file_telegram_telegram_proto_depIdxs = []int32{
	1, // 0: telegram.CallbackEvent.event:type_name -> telegram.CallbackType
	0, // 1: telegram.CommandEvent.command:type_name -> telegram.CommandType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_telegram_telegram_proto_init() }
func file_telegram_telegram_proto_init() {
	if File_telegram_telegram_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_telegram_telegram_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromptEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_telegram_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_telegram_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_telegram_telegram_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_telegram_telegram_proto_goTypes,
		DependencyIndexes: file_telegram_telegram_proto_depIdxs,
		EnumInfos:         file_telegram_telegram_proto_enumTypes,
		MessageInfos:      file_telegram_telegram_proto_msgTypes,
	}.Build()
	File_telegram_telegram_proto = out.File
	file_telegram_telegram_proto_rawDesc = nil
	file_telegram_telegram_proto_goTypes = nil
	file_telegram_telegram_proto_depIdxs = nil
}
